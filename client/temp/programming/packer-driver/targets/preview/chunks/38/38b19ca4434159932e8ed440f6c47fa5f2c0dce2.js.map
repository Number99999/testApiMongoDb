{"version":3,"sources":["file:///D:/BE/testApi/client/assets/scipts/xml.ts"],"names":["Xml","_instance","instance","xmlPost","url","data","isAsync","callback","isJSONType","xhr","XMLHttpRequest","onreadystatechange","self","evt","console","log","readyState","responseText","status","bind","open","setRequestHeader","send","error","message","xmlGet","blRequestStatus"],"mappings":"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","sourcesContent":["export class Xml {\r\n    private _instance: Xml;\r\n    public get instance() {\r\n        if (!this._instance) this._instance = new Xml();\r\n        return this._instance;\r\n    }\r\n    xmlPost(url: string, data: any, isAsync: boolean = false, callback: Function = null, isJSONType: boolean = false) {\r\n        try {\r\n            let xhr = new XMLHttpRequest();\r\n            // xhr.withCredentials = true;\r\n            xhr.onreadystatechange = function (self, evt) {\r\n                console.log(\"POST > callback status: \", callback != null);\r\n                if (xhr.readyState == 4) {\r\n                    callback && callback(xhr.responseText, xhr.status == 200);\r\n                } else {\r\n                    console.log(\"POST > xhr status: \", xhr.status, xhr.responseText);\r\n                }\r\n            }.bind(this);\r\n            xhr.open(\"POST\", url);\r\n            xhr.setRequestHeader(\"Accept\", \"text/plain\");\r\n            if (isJSONType) {\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            }\r\n            else {\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            }\r\n            xhr.send(data);\r\n        } catch (error) {\r\n            console.error(`HTTP request POST error: ${error.message}`);\r\n        }\r\n    }\r\n    xmlGet(url: string, callback: Function = null) {\r\n        try {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"GET\", url);\r\n            xhr.onreadystatechange = function (evt) {\r\n                // status of xhr HTTP Request, need to handle in case of failure\r\n                if (xhr.readyState == 4) {\r\n                    let blRequestStatus = xhr.status == 200;\r\n                    // console.log(\"GET > callback status: \", callback != null);\r\n                    console.log(\"GET > xhr status: \", xhr.status);\r\n                    callback && callback(xhr.responseText, blRequestStatus);\r\n                }\r\n            }.bind(this);\r\n            // xhr.setRequestHeader(\"Accept\",\"Application/Json\");        \r\n            xhr.send();\r\n        } catch (error) {\r\n            console.error(`HTTP request GET error: ${error.message}`);\r\n        }\r\n    }\r\n}"]}