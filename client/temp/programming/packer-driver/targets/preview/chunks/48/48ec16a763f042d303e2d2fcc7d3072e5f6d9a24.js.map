{"version":3,"sources":["file:///D:/BE/testApi/client/assets/scipts/xml.ts"],"names":["Xml","instance","_instance","xmlGet","url","callback","xhr","XMLHttpRequest","open","onreadystatechange","evt","readyState","blRequestStatus","status","console","log","responseText","bind","send","error","message"],"mappings":";;;iBAAaA,G;;;;;;;;;;;;;qBAAAA,G,GAAN,MAAMA,GAAN,CAAU;AAEa,mBAARC,QAAQ,GAAG;AACzB,cAAI,CAAC,KAAKC,SAAV,EAAqB,KAAKA,SAAL,GAAiB,IAAIF,GAAJ,EAAjB;AACrB,iBAAO,KAAKE,SAAZ;AACH,SALY,CAMb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,QAAAA,MAAM,CAACC,GAAD,EAAcC,QAAd,EAAyC;AAAA,cAA3BA,QAA2B;AAA3BA,YAAAA,QAA2B,GAAN,IAAM;AAAA;;AAC3C,cAAI;AACA,gBAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,YAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBJ,GAAhB;;AACAE,YAAAA,GAAG,CAACG,kBAAJ,GAAyB,UAAUC,GAAV,EAAe;AACpC;AACA,kBAAIJ,GAAG,CAACK,UAAJ,IAAkB,CAAtB,EAAyB;AACrB,oBAAIC,eAAe,GAAGN,GAAG,CAACO,MAAJ,IAAc,GAApC,CADqB,CAErB;;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCT,GAAG,CAACO,MAAtC,GAA+CT,GAA/C;AACAC,gBAAAA,QAAQ,IAAIA,QAAQ,CAACC,GAAG,CAACU,YAAL,EAAmBJ,eAAnB,CAApB;AACH;AACJ,aARwB,CAQvBK,IARuB,CAQlB,IARkB,CAAzB,CAHA,CAYA;;;AACAX,YAAAA,GAAG,CAACY,IAAJ;AACH,WAdD,CAcE,OAAOC,KAAP,EAAc;AACZL,YAAAA,OAAO,CAACK,KAAR,8BAAyCA,KAAK,CAACC,OAA/C;AACH;AACJ;;AAjDY,O;;AAAJpB,MAAAA,G,CACME,S","sourcesContent":["export class Xml {\r\n    private static _instance: Xml;\r\n    public static get instance() {\r\n        if (!this._instance) this._instance = new Xml();\r\n        return this._instance;\r\n    }\r\n    // xmlPost(url: string, data: any, isAsync: boolean = false, callback: Function = null, isJSONType: boolean = false) {\r\n    //     try {\r\n    //         let xhr = new XMLHttpRequest();\r\n    //         // xhr.withCredentials = true;\r\n    //         xhr.onreadystatechange = function (self, evt) {\r\n    //             console.log(\"POST > callback status: \", callback != null);\r\n    //             if (xhr.readyState == 4) {\r\n    //                 callback && callback(xhr.responseText, xhr.status == 200);\r\n    //             } else {\r\n    //                 console.log(\"POST > xhr status: \", xhr.status, xhr.responseText);\r\n    //             }\r\n    //         }.bind(this);\r\n    //         xhr.open(\"POST\", url);\r\n    //         xhr.setRequestHeader(\"Accept\", \"text/plain\");\r\n    //         if (isJSONType) {\r\n    //             xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    //         }\r\n    //         else {\r\n    //             xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    //         }\r\n    //         xhr.send(data);\r\n    //     } catch (error) {\r\n    //         console.error(`HTTP request POST error: ${error.message}`);\r\n    //     }\r\n    // }\r\n    xmlGet(url: string, callback: Function = null) {\r\n        try {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"GET\", url);\r\n            xhr.onreadystatechange = function (evt) {\r\n                // status of xhr HTTP Request, need to handle in case of failure\r\n                if (xhr.readyState == 4) {\r\n                    let blRequestStatus = xhr.status == 200;\r\n                    // console.log(\"GET > callback status: \", callback != null);\r\n                    console.log(\"GET > xhr status: \", xhr.status), url;\r\n                    callback && callback(xhr.responseText, blRequestStatus);\r\n                }\r\n            }.bind(this);\r\n            // xhr.setRequestHeader(\"Accept\",\"Application/Json\");        \r\n            xhr.send();\r\n        } catch (error) {\r\n            console.error(`HTTP request GET error: ${error.message}`);\r\n        }\r\n    }\r\n}"]}